/*
 * Copyright 2014-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    ext.kotlin_version = '1.6.20'

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'ru.vyarus:gradle-animalsniffer-plugin:1.5.0'
    }
}

allprojects {
    repositories {
        mavenLocal()
        mavenCentral()
    }

    group = 'io.timeandspace'
    version = '1.5-SNAPSHOT'
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'kotlin'
    apply plugin: 'signing'
    apply plugin: 'maven-publish'
    if (project.name != 'gradle-plugin') {
        apply plugin: 'ru.vyarus.animalsniffer'
    }

    dependencies {
        implementation 'org.jetbrains:annotations:23.0.0'
        implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'

        def junitVersion = '5.7.0'
        testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
        testImplementation 'org.reflections:reflections:0.9.11'
        testImplementation 'com.google.guava:guava:27.1-jre'
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"

        // For Animal Sniffer
        if (project.name != 'gradle-plugin') {
            signature 'org.codehaus.mojo.signature:java18:1.0@signature'
        }
    }

    compileJava {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
        options.encoding = 'UTF-8'
    }

    compileKotlin {
        kotlinOptions {
            jvmTarget = '1.8'
            apiVersion = '1.6'
            languageVersion = '1.6'
        }
    }


    // https://docs.gradle.org/5.0-rc-1/userguide/java_library_plugin.html#sec:java_library_known_issues_compat
    configurations {
        apiElements {
            outgoing.variants.getByName('classes').artifact(
                    file: compileKotlin.destinationDir,
                    type: ArtifactTypeDefinition.JVM_CLASS_DIRECTORY,
                    builtBy: compileKotlin)
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier 'sources'
        from sourceSets.main.allSource
    }

    def generateJavadoc = project.name != 'cli'

    task javadocJar(type: Jar) {
        classifier 'javadoc'
        // The javadoc artifact still should be present by the Maven Central repo rules, just making
        // it empty.
        if (generateJavadoc)
            from javadoc
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId = "jpsg-$project.name"
                from components.java

                artifact sourcesJar
                artifact javadocJar
                pom {
                    afterEvaluate {
                        name = "JPSG $project.description"
                        description = "Java Primitive Specializations Generator $project.description"
                    }
                    url = 'https://github.com/TimeAndSpaceIO/java-primitive-specializations-generator'
                    inceptionYear = '2013'
                    licenses {
                        license {
                            name = 'The Apache Software License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution = 'repo'
                        }
                    }
                    scm {
                        url = 'https://github.com/TimeAndSpaceIO/java-primitive-specializations-generator'
                        connection = 'scm:git:git://github.com/TimeAndSpaceIO/java-primitive-specializations-generator.git'
                        developerConnection = 'scm:git:ssh://github.com/TimeAndSpaceIO/java-primitive-specializations-generator.git'
                    }
                    developers {
                        developer {
                            id = 'leventov'
                            name = 'Roman Leventov'
                            email = 'leventov.ru@gmail.com'
                            url = 'https://timeandspace.io'
                        }
                    }
                    issueManagement {
                        system = 'GitHub'
                        url = 'https://github.com/TimeAndSpaceIO/java-primitive-specializations-generator/issues'
                    }
                }
            }
        }
        ext {
            if (!project.hasProperty('sonatypeUrl'))
                sonatypeUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
            if (!project.hasProperty('sonatypeUsername')) sonatypeUsername = ''
            if (!project.hasProperty('sonatypePassword')) sonatypePassword = ''
        }
        repositories {
            maven {
                url = sonatypeUrl
                credentials {
                    username = sonatypeUsername
                    password = sonatypePassword
                }
            }
        }
    }

    ext.isReleaseVersion = !version.endsWith('SNAPSHOT')

    signing {
        required { isReleaseVersion && gradle.taskGraph.hasTask('publish') }
        sign publishing.publications.mavenJava
    }
}
